name: üß™ Test and Coverage

# Our test process is intended to run on the following environments:
# - Python 3.10, 3.11, 3.12, 3.13
# - Django 4.2, 5.1, 5.2
# - SQLite (all Python/Django versions)
# - Postgres (Python 3.12, all Django versions)
# - MySQL (Python 3.12, all Django versions)
# We use uv to manage dependencies and caching.
# We use pytest for testing and coverage.py for coverage reporting.
# We upload coverage reports to Codecov and generate an HTML report as an artifact.

on:
  workflow_dispatch:
  pull_request:
    branches: [master]

jobs:
  test-sqlite:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
        django-version: ["4.2", "5.1", "5.2"]
        exclude:
          - python-version: 3.13
            django-version: "Django>=4.2,<5.0"
    env:
      UV_CACHE_DIR: /tmp/.uv-cache
      DJANGO_VERSION: "Django==${{ matrix.django-version }}"
    name: ü™∂ SQLite test (Py ${{ matrix.python-version }} / Dj ${{ matrix.django-version }})
    steps:
      - name: üè∑Ô∏è Generate Django version tag
        run: |
          case "${{ matrix.django-version }}" in
            "4.2") echo "DJANGO_VERSION='Django>=4.2,<5.0'" >> $GITHUB_ENV ;;
            "5.1") echo "DJANGO_VERSION='Django>=5.1,<5.2'" >> $GITHUB_ENV ;;
            "5.2") echo "DJANGO_VERSION='Django>=5.2,<5.3'" >> $GITHUB_ENV ;;
          esac
      - name: üìå Checkout
        uses: actions/checkout@v5
      - name: üêç Python ${{ matrix.python-version }} setup
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          python-version: ${{ matrix.python-version }}
      - name: ‚ôªÔ∏è Cache uv
        uses: actions/cache@v4
        with:
          path: /tmp/.uv-cache
          key: uv-${{ matrix.python-version }}-${{ matrix.django-version }}-${{ hashFiles('pyproject.toml', 'uv.lock') }}
          restore-keys: |
            uv-${{ matrix.python-version }}-
            uv-${{ matrix.python-version }}-${{ matrix.django-version }}-
            uv-${{ matrix.python-version }}-${{ matrix.django-version }}-${{ hashFiles('pyproject.toml', 'uv.lock') }}
      - name: üì¶ Install dependencies (Django ${{ matrix.django-version }})
        run: |
          uv add --dev ${{ env.DJANGO_VERSION }}
          uv sync --dev
      - name: üß™ Test with pytest and calculate coverage
        env:
          COVERAGE_FILE: .coverage.${{ matrix.python-version }}-${{ matrix.django-version }}
        run: make test
      - name: üóúÔ∏è Minimize uv cache
        run: uv cache prune --ci
      - name: üì§ Upload coverage data as artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-data-${{ matrix.python-version }}-${{ matrix.django-version }}
          path: .coverage.*
          include-hidden-files: true

  test-postgres:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: test_camomilla
          POSTGRES_USER: camomilla
          POSTGRES_PASSWORD: camomilla
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U camomilla" --health-interval=5s --health-timeout=5s --health-retries=5
    strategy:
      matrix:
        python-version: ["3.12"]
        django-version: ["4.2", "5.1", "5.2"]
    env:
      UV_CACHE_DIR: /tmp/.uv-cache
      DJANGO_VERSION: "Django==${{ matrix.django-version }}"
    name: üêò Postgres tests (Py ${{ matrix.python-version }} / Dj ${{ matrix.django-version }})
    steps:
      - name: üè∑Ô∏è Generate Django version tag
        run: |
          case "${{ matrix.django-version }}" in
            "4.2") echo "DJANGO_VERSION='Django>=4.2,<5.0'" >> $GITHUB_ENV ;;
            "5.1") echo "DJANGO_VERSION='Django>=5.1,<5.2'" >> $GITHUB_ENV ;;
            "5.2") echo "DJANGO_VERSION='Django>=5.2,<5.3'" >> $GITHUB_ENV ;;
          esac
      - name: üìå Checkout
        uses: actions/checkout@v5
      - name: üêç Python ${{ matrix.python-version }} setup
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          python-version: ${{ matrix.python-version }}
      - name: ‚ôªÔ∏è Cache uv
        uses: actions/cache@v4
        with:
          path: /tmp/.uv-cache
          key: uv-${{ matrix.python-version }}-${{ matrix.django-version }}-${{ hashFiles('pyproject.toml', 'uv.lock') }}
          restore-keys: |
            uv-${{ matrix.python-version }}-
            uv-${{ matrix.python-version }}-${{ matrix.django-version }}-
            uv-${{ matrix.python-version }}-${{ matrix.django-version }}-${{ hashFiles('pyproject.toml', 'uv.lock') }}
      - name: üì¶ Install dependencies (Django ${{ matrix.django-version }})
        run: |
          uv add --dev ${{ env.DJANGO_VERSION }}
          uv sync --dev
      - name: üêò Install Postgres driver
        run: |
          if [ "${{ matrix.python-version }}" = "3.10" ]; then
            uv add --dev "psycopg2-binary<2.9"
          else
            uv add --dev "psycopg2-binary>=2.9"
          fi
      - name: üß™ Test with pytest (Postgres)
        env:
          CAMOMILLA_TEST_DB_BACKEND: postgres
          COVERAGE_FILE: .coverage.postgres-${{ matrix.python-version }}-${{ matrix.django-version }}
        run: make test
      - name: üóúÔ∏è Minimize uv cache
        run: uv cache prune --ci
      - name: üì§ Upload coverage data as artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-data-postgres-${{ matrix.python-version }}-${{ matrix.django-version }}
          path: .coverage.postgres-*
          include-hidden-files: true

  test-mysql:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.4
        env:
          MYSQL_DATABASE: test_camomilla
          MYSQL_USER: camomilla
          MYSQL_PASSWORD: camomilla
          MYSQL_ROOT_PASSWORD: root
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -u camomilla --password=camomilla" --health-interval=5s --health-timeout=5s --health-retries=5
    strategy:
      matrix:
        python-version: ["3.12"]
        django-version: ["4.2", "5.1", "5.2"]
    env:
      UV_CACHE_DIR: /tmp/.uv-cache
      DJANGO_VERSION: "Django==${{ matrix.django-version }}"
    name: üê¨ MySQL tests (Py ${{ matrix.python-version }} / Dj ${{ matrix.django-version }})
    steps:
      - name: üè∑Ô∏è Generate Django version tag
        run: |
          case "${{ matrix.django-version }}" in
            "4.2") echo "DJANGO_VERSION='Django>=4.2,<5.0'" >> $GITHUB_ENV ;;
            "5.1") echo "DJANGO_VERSION='Django>=5.1,<5.2'" >> $GITHUB_ENV ;;
            "5.2") echo "DJANGO_VERSION='Django>=5.2,<5.3'" >> $GITHUB_ENV ;;
          esac
      - name: üìå Checkout
        uses: actions/checkout@v5
      - name: üêç Python ${{ matrix.python-version }} setup
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          python-version: ${{ matrix.python-version }}
      - name: ‚ôªÔ∏è Cache uv
        uses: actions/cache@v4
        with:
          path: /tmp/.uv-cache
          key: uv-${{ matrix.python-version }}-${{ matrix.django-version }}-${{ hashFiles('pyproject.toml', 'uv.lock') }}
          restore-keys: |
            uv-${{ matrix.python-version }}-
            uv-${{ matrix.python-version }}-${{ matrix.django-version }}-
            uv-${{ matrix.python-version }}-${{ matrix.django-version }}-${{ hashFiles('pyproject.toml', 'uv.lock') }}
      - name: üì¶ Install dependencies (Django ${{ matrix.django-version }})
        run: |
          uv add --dev ${{ env.DJANGO_VERSION }}
          uv sync --dev
      - name: üê¨ Install MySQL driver
        run: |
          uv add --dev "mysqlclient>=2.2,<3.0"
      - name: üß™ Test with pytest (MySQL)
        env:
          CAMOMILLA_TEST_DB_BACKEND: mysql
          COVERAGE_FILE: .coverage.mysql-${{ matrix.python-version }}-${{ matrix.django-version }}
        run: make test
      - name: üóúÔ∏è Minimize uv cache
        run: uv cache prune --ci
      - name: üì§ Upload coverage data as artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-data-mysql-${{ matrix.python-version }}-${{ matrix.django-version }}
          path: .coverage.mysql-*
          include-hidden-files: true

  coverage:
    needs:
      - test-sqlite
      - test-postgres
      - test-mysql
    runs-on: ubuntu-latest
    name: üèñÔ∏è Upload to codecov
    steps:
      - name: üìå Checkout
        uses: actions/checkout@v5
      - name: üêç Python setup
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: üì¶ Install dependencies (coverage)
        run: |
          python -m pip install --upgrade pip
          pip install coverage

      - name: üìá Download coverage data
        uses: actions/download-artifact@v4
        with:
          pattern: coverage-data-*
          merge-multiple: true

      - name: üìí Combine coverage data
        run: |
          echo "Found coverage files before combine:" && ls -al .coverage* || true
          coverage combine

      - name: üñ®Ô∏è Generate coverage report
        run: |
          coverage report -m --skip-covered --skip-empty | sed 's/^/    /' >> $GITHUB_STEP_SUMMARY
          coverage html --skip-covered --skip-empty

      - name: üì§ Upload HTML report as artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/*
          include-hidden-files: true

      - name: üèñÔ∏è Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
