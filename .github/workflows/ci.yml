name: 🧪 Test and Coverage

on:
  workflow_dispatch:
  pull_request:
    branches: [ master, next ]

jobs:
  test-sqlite:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
        django-version: ["4.2", "5.1", "5.2"]
        exclude:
          - python-version: 3.13
            django-version: "Django>=4.2,<5.0"
    name: 🦠 Test on Python ${{ matrix.python-version }} with ${{ matrix.django-version }}

    steps:
    - name: 🥒 Prepare Django version
      run: |
        case "${{ matrix.django-version }}" in
          "4.2") echo "DJANGO_VERSION='Django>=4.2,<5.0'" >> $GITHUB_ENV ;;
          "5.1") echo "DJANGO_VERSION='Django>=5.1,<5.2'" >> $GITHUB_ENV ;;
          "5.2") echo "DJANGO_VERSION='Django>=5.2,<5.3'" >> $GITHUB_ENV ;;
        esac
    - uses: actions/checkout@v5
    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: astral-sh/setup-uv@v6
      with:
        python-version: ${{ matrix.python-version }}
    - name: ♻️ Cache uv
      uses: actions/cache@v4
      with:
        path: /tmp/.uv-cache
        key: uv-${{ matrix.python-version }}-${{ matrix.django-version }}-${{ hashFiles('pyproject.toml', 'uv.lock') }}
        restore-keys: |
          uv-${{ matrix.python-version }}-
          uv-${{ matrix.python-version }}-${{ matrix.django-version }}-
          uv-${{ matrix.python-version }}-${{ matrix.django-version }}-${{ hashFiles('pyproject.toml', 'uv.lock') }}
    - name: 📥 Sync dependencies (Django ${{ matrix.django-version }})
      run: |
        uv add --dev ${{ env.DJANGO_VERSION }}
        uv sync --dev
    - name: 🔬 Test with pytest and calculate coverage 
      env:
        COVERAGE_FILE: .coverage.${{ matrix.python-version }}-${{ matrix.django-version }}
      run: make test
    - name: 📦 Minimize uv cache
      run: uv cache prune --ci
    - name: 📦 Upload coverage data
      uses: actions/upload-artifact@v4
      with:
        name: coverage-data-${{ matrix.python-version }}-${{ matrix.django-version }}
        path: .coverage.*
        include-hidden-files: true

  test-postgres:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: test_camomilla
          POSTGRES_USER: camomilla
          POSTGRES_PASSWORD: camomilla
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U camomilla" --health-interval=5s --health-timeout=5s --health-retries=5
    strategy:
      matrix:
        python-version: ["3.12"]
        django-version: ["4.2", "5.1", "5.2"]
    name: 🐘 Postgres tests (Py ${{ matrix.python-version }} / Dj ${{ matrix.django-version }})
    steps:
      - name: 🥒 Prepare Django version
        run: |
          case "${{ matrix.django-version }}" in
            "4.2") echo "DJANGO_VERSION='Django>=4.2,<5.0'" >> $GITHUB_ENV ;;
            "5.1") echo "DJANGO_VERSION='Django>=5.1,<5.2'" >> $GITHUB_ENV ;;
            "5.2") echo "DJANGO_VERSION='Django>=5.2,<5.3'" >> $GITHUB_ENV ;;
          esac
      - uses: actions/checkout@v5
      - name: 🐍 Set up Python ${{ matrix.python-version }}
        uses: astral-sh/setup-uv@v6
        with:
          python-version: ${{ matrix.python-version }}
      - name: ♻️ Cache uv
        uses: actions/cache@v4
        with:
          path: /tmp/.uv-cache
          key: uv-pg-${{ matrix.python-version }}-${{ matrix.django-version }}-${{ hashFiles('pyproject.toml', 'uv.lock') }}
          restore-keys: |
            uv-pg-${{ matrix.python-version }}-
            uv-pg-${{ matrix.python-version }}-${{ matrix.django-version }}-
      - name: 📥 Sync dependencies (Django ${{ matrix.django-version }})
        run: |
          uv add --dev ${{ env.DJANGO_VERSION }}
          uv sync --dev
      - name: 🔬 Test with pytest (Postgres)
        env:
          CAMOMILLA_TEST_DB_BACKEND: postgres
          COVERAGE_FILE: .coverage.postgres-${{ matrix.python-version }}-${{ matrix.django-version }}
        run: make test
      - name: 📦 Minimize uv cache
        run: uv cache prune --ci
      - name: 📦 Upload coverage data
        uses: actions/upload-artifact@v4
        with:
          name: coverage-data-postgres-${{ matrix.python-version }}-${{ matrix.django-version }}
          path: .coverage.postgres-*
          include-hidden-files: true

  test-mysql:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.4
        env:
          MYSQL_DATABASE: test_camomilla
          MYSQL_USER: camomilla
          MYSQL_PASSWORD: camomilla
          MYSQL_ROOT_PASSWORD: root
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -u camomilla --password=camomilla" --health-interval=5s --health-timeout=5s --health-retries=5
    strategy:
      matrix:
        python-version: ["3.12"]
        django-version: ["4.2", "5.1", "5.2"]
    name: 🐬 MySQL tests (Py ${{ matrix.python-version }} / Dj ${{ matrix.django-version }})
    steps:
      - name: 🥒 Prepare Django version
        run: |
          case "${{ matrix.django-version }}" in
            "4.2") echo "DJANGO_VERSION='Django>=4.2,<5.0'" >> $GITHUB_ENV ;;
            "5.1") echo "DJANGO_VERSION='Django>=5.1,<5.2'" >> $GITHUB_ENV ;;
            "5.2") echo "DJANGO_VERSION='Django>=5.2,<5.3'" >> $GITHUB_ENV ;;
          esac
      - uses: actions/checkout@v5
      - name: 🐍 Set up Python ${{ matrix.python-version }}
        uses: astral-sh/setup-uv@v6
        with:
          python-version: ${{ matrix.python-version }}
      - name: ♻️ Cache uv
        uses: actions/cache@v4
        with:
          path: /tmp/.uv-cache
          key: uv-mysql-${{ matrix.python-version }}-${{ matrix.django-version }}-${{ hashFiles('pyproject.toml', 'uv.lock') }}
          restore-keys: |
            uv-mysql-${{ matrix.python-version }}-
            uv-mysql-${{ matrix.python-version }}-${{ matrix.django-version }}-
      - name: 📥 Sync dependencies (Django ${{ matrix.django-version }})
        run: |
          uv add --dev ${{ env.DJANGO_VERSION }}
          uv sync --dev
      - name: ➕ Install MySQL driver
        run: |
          uv add --dev "mysqlclient>=2.2,<3.0"
      - name: 🔬 Test with pytest (MySQL)
        env:
          CAMOMILLA_TEST_DB_BACKEND: mysql
          COVERAGE_FILE: .coverage.mysql-${{ matrix.python-version }}-${{ matrix.django-version }}
        run: make test
      - name: 📦 Minimize uv cache
        run: uv cache prune --ci
      - name: 📦 Upload coverage data
        uses: actions/upload-artifact@v4
        with:
          name: coverage-data-mysql-${{ matrix.python-version }}-${{ matrix.django-version }}
          path: .coverage.mysql-*
          include-hidden-files: true

  coverage:
    needs:
      - test-sqlite
      - test-postgres
      - test-mysql
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install coverage

      - name: 📥 Download coverage data
        uses: actions/download-artifact@v4
        with:
          pattern: coverage-data-*
          merge-multiple: true

      - name: ⛙ Combine coverage data
        run: |
          echo "Found coverage files before combine:" && ls -al .coverage* || true
          coverage combine

      - name: 📊 Generate coverage report
        run: |
          coverage report -m --skip-covered --skip-empty | sed 's/^/    /' >> $GITHUB_STEP_SUMMARY
          coverage html --skip-covered --skip-empty

      - name: 📤 Upload HTML report as artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/*
          include-hidden-files: true

      - name: 🩺 Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
