import{_ as s,c as n,a as e,o as t}from"./app-DpFnKAEa.js";const p={};function l(o,a){return t(),n("div",null,[...a[0]||(a[0]=[e(`<h1 id="üêù-use-api" tabindex="-1"><a class="header-anchor" href="#üêù-use-api"><span>üêù Use API</span></a></h1><p>Camomilla comes with many api endpoint builded with Django Rest Framework.</p><p>To use the endpoints you need to add the handler to the project urls.py</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code class="language-python"><span class="line"><span class="token comment"># &lt;project_name&gt;/urls.py</span></span>
<span class="line">urlpatterns <span class="token operator">+=</span> path<span class="token punctuation">(</span><span class="token string">&#39;api/camomilla/&#39;</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span><span class="token string">&#39;camomilla.urls&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">‚ö†Ô∏è Beware!</p><p>Remember that if you use camomilla pages <code>dynamic_pages_urls</code> handler should always be the last handler of your urlpatterns list.</p></div><p>By default every endpoint comes with a full CRUD in the style of django rest framework with some mode feature beaked in.</p><h2 id="üß±-base-classes" tabindex="-1"><a class="header-anchor" href="#üß±-base-classes"><span>üß± Base Classes</span></a></h2><p>If you need to implement your own api, we suggest to use camomilla <code>BaseModelSerializer</code> and <code>BaseModelViewset</code> as the base class of your serializer and viewset respectively.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code class="language-python"><span class="line"><span class="token keyword">class</span> <span class="token class-name">MyModelSerializer</span><span class="token punctuation">(</span>BaseModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span></span>
<span class="line">        model <span class="token operator">=</span> MyModel</span>
<span class="line">        fields <span class="token operator">=</span> <span class="token string">&quot;__all__&quot;</span></span>
<span class="line">        depth <span class="token operator">=</span> <span class="token number">5</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code class="language-python"><span class="line"><span class="token keyword">class</span> <span class="token class-name">MyModelViewSet</span><span class="token punctuation">(</span>BaseModelViewset<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    queryset <span class="token operator">=</span> MyModel<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    serializer_class <span class="token operator">=</span> MyModelSerializer</span>
<span class="line">    permission_classes <span class="token operator">=</span> <span class="token punctuation">(</span>CamomillaBasePermissions<span class="token punctuation">,</span><span class="token punctuation">)</span></span>
<span class="line">    model <span class="token operator">=</span> MyModel</span>
<span class="line">    search_fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;title&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;description&quot;</span><span class="token punctuation">,</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This will provide to your endpoint all the features of standard camomilla api.</p><h2 id="üñ≤Ô∏è-the-model-api-register-decorator" tabindex="-1"><a class="header-anchor" href="#üñ≤Ô∏è-the-model-api-register-decorator"><span>üñ≤Ô∏è The model_api.register decorator</span></a></h2><p>If you need to create a standard api endpoint you can take advantage of model_api register decorator. To use this aproach you need to add the model_api handler to your project urls.py</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code class="language-python"><span class="line"><span class="token comment"># &lt;project_name&gt;/urls.py</span></span>
<span class="line">urlpatterns <span class="token operator">+=</span> path<span class="token punctuation">(</span><span class="token string">&#39;api/models/&#39;</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span><span class="token string">&#39;camomilla.model_api&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Then you just need to decorate your model with <code>@model_api.register</code></p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code class="language-python"><span class="line"><span class="token keyword">from</span> camomilla <span class="token keyword">import</span> model_api</span>
<span class="line"></span>
<span class="line"><span class="token decorator annotation punctuation">@model_api<span class="token punctuation">.</span>register</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">MyModel</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    title <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">)</span></span>
<span class="line">    description <span class="token operator">=</span> models<span class="token punctuation">.</span>TextField<span class="token punctuation">(</span>null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This will create an api endpoint with url <code>/api/models/my-model</code> with full camomilla api capabilities.</p><p>You can also personalize the view or the serializer passing some parameter to the register function:</p><ul><li><code>base_serializer</code>: The base serializer to use for the model.</li><li><code>base_viewset</code>: The base viewset to use for the model.</li><li><code>serializer_meta</code>: The meta class to use for the serializer.</li><li><code>viewset_attrs</code>: The attributes to add to the viewset.</li><li><code>filters</code>: The filters to apply to the queryset.</li></ul><h2 id="üóÇÔ∏è-list-endpoint" tabindex="-1"><a class="header-anchor" href="#üóÇÔ∏è-list-endpoint"><span>üóÇÔ∏è List endpoint</span></a></h2><p><strong>URL Structure:</strong></p><ul><li><code>api/camomilla/&lt;model_name&gt;</code></li></ul><p><strong>Simple Response:</strong></p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code class="language-json"><span class="line"><span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">{</span> ... single model data ... <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="use-pagination" tabindex="-1"><a class="header-anchor" href="#use-pagination"><span>Use Pagination</span></a></h3><p>List api comes with a builtin paginator. The paginated response is disabled by defualt to be compliant with default rest framework lists. If you want a paginated response you need to specify the page size in the request as a GET parameter.</p><p>For example, the request <code>/api/camomilla/&lt;model_name&gt;?items=10</code>, will return data splittet 10 elements per page.</p><p><strong>Paginated Response:</strong></p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code class="language-json"><span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;items&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token punctuation">{</span> ... single model data ... <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;paginator&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">&quot;count&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// number of elements</span></span>
<span class="line">        <span class="token property">&quot;page&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// current page number</span></span>
<span class="line">        <span class="token property">&quot;has_next&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// has a next page</span></span>
<span class="line">        <span class="token property">&quot;has_previous&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// has a previous page</span></span>
<span class="line">        <span class="token property">&quot;pages&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// total number of pages</span></span>
<span class="line">        <span class="token property">&quot;page_size&quot;</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token comment">// number of elements per page (depends on items parameter)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="use-filtering" tabindex="-1"><a class="header-anchor" href="#use-filtering"><span>Use Filtering</span></a></h3><p>List api comes with a builtin filter syntax. You can filter data with GET query parameters using the following sintax:</p><p><code>/api/camomilla/&lt;model_name&gt;?fltr=field_name=value</code></p><p>This syntax can be repeated multiple times.</p><p><code>/api/camomilla/&lt;model_name&gt;?fltr=field_name=value&amp;fltr=field_name=value</code></p><p>In place of <code>field_name</code> you can use any <a href="https://docs.djangoproject.com/en/4.2/topics/db/queries/#retrieving-specific-objects-with-filters" target="_blank" rel="noopener noreferrer">django filter argument</a>.</p><p>If the value has commas and is between square brackets like <code>[val1,val2,val3]</code> it will be treated as an array. For example you can filter some model like this:</p><p><code>/api/camomilla/&lt;model_name&gt;?fltr=field_name__in=[val1,val2]</code></p><h3 id="use-search" tabindex="-1"><a class="header-anchor" href="#use-search"><span>Use Search</span></a></h3><p>You can also full text search your model with query param <code>search</code>:</p><p><code>/api/camomilla/&lt;model_name&gt;?search=q_string</code></p><h2 id="üóÇÔ∏è-detail-endpoint" tabindex="-1"><a class="header-anchor" href="#üóÇÔ∏è-detail-endpoint"><span>üóÇÔ∏è Detail endpoint</span></a></h2><p>Retrieve api just returns model data serialized in a json. The serialization goes through nested objects by default, creating on the fly nested serializers. You can modify this behaviour decreasing the value <code>depth</code> in Serializer Meta for a single serializer or change the default option in camomilla settings.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code class="language-python"><span class="line">CAMOMILLA <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token string">&quot;MEDIA&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token string">&quot;API&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">&quot;NESTING_DEPTH&quot;</span><span class="token punctuation">:</span> <span class="token number">10</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>URL Structure:</strong></p><ul><li><code>api/camomilla/&lt;model_name&gt;/&lt;primary_key&gt;</code></li></ul><p><strong>Simple Response:</strong></p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code class="language-json"><span class="line"><span class="token punctuation">{</span> ... single model data ... <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,47)])])}const c=s(p,[["render",l]]),r=JSON.parse('{"path":"/How%20to/Use%20API/","title":"üêù Use API","lang":"en-US","frontmatter":{},"git":{"updatedTime":1741708855000,"contributors":[{"name":"bnznamco","username":"bnznamco","email":"gabriele.baldi.01@gmail.com","commits":5,"url":"https://github.com/bnznamco"},{"name":"marcobeca","username":"marcobeca","email":"20611637+marcobeca@users.noreply.github.com","commits":1,"url":"https://github.com/marcobeca"}],"changelog":[{"hash":"8ed0c95c38e4ed651cc976c84fb29f92dc7f9f83","time":1741708855000,"email":"20611637+marcobeca@users.noreply.github.com","author":"Marco Becattini","message":"chore: Test model api register"},{"hash":"8a6c0063ae005df204d16ce7747c84b9cdc68d9c","time":1694268141000,"email":"gabriele.baldi.01@gmail.com","author":"bnznamco","message":"docs: update docs"},{"hash":"a2fc0cc1e3dde91f6cb9d27892f7682e277a8765","time":1690904296000,"email":"gabriele.baldi.01@gmail.com","author":"bnznamco","message":"docs: update media docs"},{"hash":"9a2261dbf491ee8a5b1023791dd76737db5497ae","time":1690805997000,"email":"gabriele.baldi.01@gmail.com","author":"bnznamco","message":"docs: update docs"},{"hash":"fda7864b4979cf33ccaf9af256bda77f48eb82a8","time":1690803788000,"email":"gabriele.baldi.01@gmail.com","author":"bnznamco","message":"docs: update docs"},{"hash":"6dcaaf66d1dea2a89bda421c5928536ece96b9e8","time":1689849345000,"email":"gabriele.baldi.01@gmail.com","author":"bnznamco","message":"docs: update docs"}]},"filePathRelative":"How to/Use API/README.md"}');export{c as comp,r as data};
